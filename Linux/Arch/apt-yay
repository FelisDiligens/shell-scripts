#!/bin/bash

# apt-yay
# -------
# Simple yay wrapper inspired by apt, dnf, zypper, and similar package managers.
#
# To "install" this script:
# sudo mkdir -p /usr/local/bin
# sudo cp apt-yay /usr/local/bin
# sudo chmod +x /usr/local/bin/apt-yay
# (you can also rename this script to any name you like)

# Sources:
# https://wiki.archlinux.org/title/pacman
# https://github.com/Jguer/yay
# https://gitlab.archlinux.org/pacman/pacman-contrib
# https://github.com/archlinux-downgrade/downgrade

# Colors
# https://stackoverflow.com/a/5947802
BOLDRED='\033[1;31m'    # Used for errors
BOLDYELLOW='\033[1;33m' # Used for warnings
CYAN='\033[0;36m'       # Used to highlight commands
BOLDCYAN='\033[1;36m'
BOLDGREEN='\033[1;32m'
BOLDBLUE='\033[1;34m'
BOLDWHITE='\033[1;37m'
BOLDPURPLE='\033[1;35m'
RESET='\033[0m'         # Resets text color

# Name of the script file, e.g. "apt-yay"
SCRIPTNAME=$(basename "$0")

function show-message {
    case $1 in
        no-more-args)
            echo "No $2 given."
            echo -e "Usage: ${CYAN}$SCRIPTNAME $3 ${2^^}(S)${RESET}"
        ;;
        no-second-arg)
            echo "No $2 given."
            echo -e "Usage: ${CYAN}$SCRIPTNAME $3 ${2^^}${RESET}"
        ;;
        unknown-arg)
            echo "Unknown argument: $2"
            echo -e "Usage: ${CYAN}$SCRIPTNAME $3${RESET}"
        ;;
        downgrade-missing)
            echo -e "${BOLDYELLOW}Please install downgrade from the AUR${RESET}. See: https://aur.archlinux.org/packages/downgrade"
            echo -e "Run $ ${CYAN}yay -S downgrade${RESET} or $ ${CYAN}$SCRIPTNAME install downgrade${RESET}"
        ;;
        reflector-missing)
            echo -e "${BOLDYELLOW}Please install reflector${RESET}"
            echo -e "Run $ ${CYAN}yay -S reflector${RESET} or $ ${CYAN}$SCRIPTNAME install reflector${RESET}"
        ;;
        pacman-contrib-missing)
            echo -e "${BOLDYELLOW}Please install pacman-contrib to use $2${RESET}"
            echo -e "Run $ ${CYAN}yay -S pacman-contrib${RESET} or $ ${CYAN}$SCRIPTNAME install pacman-contrib${RESET}"
        ;;
        yay-missing)
            echo -e "${BOLDRED}Error: yay is not installed.${RESET}"
            # Might need to run `pacman -Sy` (or `apt-yay update`) before:
            echo -e "Run (Arch)    $ ${CYAN}sudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si${RESET}"
            echo -e "Run (Manjaro) $ ${CYAN}sudo pacman -S --needed git base-devel yay${RESET}"
        ;;
        pacman-missing)
            echo -e "${BOLDRED}Error: pacman is not installed.${RESET}"
            echo "Are you using Arch Linux?"
        ;;
        root-warning)
            echo -e "${BOLDYELLOW}Avoid running apt-yay as root/sudo.${RESET}"
            echo "It will ask for your password if necessary."
        ;;
    esac
}

function confirm {
    read -p "$1 [y|N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

function sanity-checks {
    # Check if pacman command exists
    if ! [ -x "$(command -v pacman)" ] && [ "$1" != "help" ]; then
        show-message "pacman-missing"
        exit 1
    fi

    # Check if yay command exists
    if ! [ -x "$(command -v yay)" ] && [ "$1" != "help" ]; then
        show-message "yay-missing"
        exit 1
    fi

    # Show warning if we run as root
    if [ "$EUID" -eq 0 ]; then
        show-message "root-warning"
        ! confirm "Do you want to continue?" && exit 1
    fi
}

function is-known-repo {
    REPO=1
    case "$1" in
        # "core" "core-testing" "extra" "extra-testing" "multilib" "multilib-testing" "gnome-unstable" "kde-unstable" "endeavouros" "aur" "chaotic-aur" "staging"
        *-testing|*-unstable|staging|core|extra|multilib|*aur|endeavouros)
            REPO=0
        ;;
    esac
    return $REPO
}

function get-repo-color {
    REPO_COLOR=$BOLDYELLOW
    case "$1" in
        *-testing|*-unstable|staging) REPO_COLOR=$BOLDRED ;;
        core) REPO_COLOR=$BOLDYELLOW ;;
        extra) REPO_COLOR=$BOLDGREEN ;;
        multilib) REPO_COLOR=$BOLDCYAN ;;
        *aur) REPO_COLOR=$BOLDBLUE ;;
        endeavouros) REPO_COLOR=$BOLDYELLOW ;;
    esac
    echo "$REPO_COLOR"
}

function list-upgradable {
    ! [ -x "$(command -v checkupdates)" ] && show-message "pacman-contrib-missing" "checkupdates" && exit
    checkupdates "$@"
}

function list-installed {
    yay -Qe # -e is --explicit
}

function list-installed-from-aur {
    yay -Qm | while read -r line; do
        # The following check assumes that any installed AUR package has a corresponding folder under ~/.cache/yay/
        package_name="$(echo "$line" | cut -d' ' -f1)"
        if [ -d "$HOME/.cache/yay/$package_name" ]; then
            echo -e "${BOLDBLUE}aur${RESET}/${BOLDWHITE}$package_name${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
        else
            echo -e "${BOLDYELLOW}local${RESET}/${BOLDWHITE}$package_name${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
        fi
    done
}

function list-installed-from-repo {
    ! [ -x "$(command -v paclist)" ] && show-message "pacman-contrib-missing" "paclist" && exit
    if [ -n "$1" ]; then
        is-known-repo "$1"
        is_repo=$?
        repo_color="$(get-repo-color "$1")"
        paclist "${@:3}" | while read -r line; do
            if [ "$is_repo" -eq "0" ]; then
                echo -e "${repo_color}$1${RESET}/${BOLDWHITE}$(echo "$line" | cut -d' ' -f1)${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
            else
                echo -e "${BOLDWHITE}$(echo "$line" | cut -d' ' -f1)${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
            fi
        done
    else
        for repo in "core" "core-testing" "extra" "extra-testing" "multilib" "multilib-testing" "gnome-unstable" "kde-unstable" "endeavouros" "aur" "chaotic-aur" "staging"; do
            repo_color="$(get-repo-color "$repo")"
            paclist $repo 2>/dev/null | while read -r line; do
                echo -e "${repo_color}$repo${RESET}/${BOLDWHITE}$(echo "$line" | cut -d' ' -f1)${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
            done
        done
    fi
}

function show-help {
    echo -e "${BOLDWHITE}$SCRIPTNAME — Simple yay wrapper inspired by apt${RESET}"
    echo "--------------------------------------------"
    echo -e "${BOLDWHITE}Install:${RESET}           ${CYAN}$SCRIPTNAME install PACKAGE(S)${RESET}"
    echo -e "${BOLDWHITE}Remove:${RESET}            ${CYAN}$SCRIPTNAME remove PACKAGE(S)${RESET}"
    echo -e "${BOLDWHITE}Purge:${RESET}             ${CYAN}$SCRIPTNAME purge PACKAGE(S)${RESET}"
    echo -e " → ${CYAN}purge${RESET} additionally removes configuration files."
    echo -e "   Both ${CYAN}remove${RESET} and ${CYAN}purge${RESET} also remove unused dependencies."
    echo -e "${BOLDWHITE}Downgrade:${RESET}         ${CYAN}$SCRIPTNAME downgrade PACKAGE(S)${RESET}"
    echo -e "${BOLDWHITE}Search:${RESET}            ${CYAN}$SCRIPTNAME search PATTERN${RESET}"
    echo -e "${BOLDWHITE}Show info:${RESET}         ${CYAN}$SCRIPTNAME show PACKAGE${RESET}"
    echo -e "${BOLDWHITE}Update db:${RESET}         ${CYAN}$SCRIPTNAME update [--force|-f]${RESET}"
    echo -e " → use the ${CYAN}--force${RESET} switch after changing the mirrorlist"
    echo    "   outside of $SCRIPTNAME."
    echo -e "${BOLDWHITE}Upgrade:${RESET}           ${CYAN}$SCRIPTNAME upgrade [PACKAGE(S)]${RESET}"
    echo -e "${BOLDWHITE}Update mirrors:${RESET}    ${CYAN}$SCRIPTNAME update-mirrors${RESET}"
    echo -e "${BOLDWHITE}List all:${RESET}          ${CYAN}$SCRIPTNAME list${RESET}"
    echo -e "${BOLDWHITE}List installed:${RESET}    ${CYAN}$SCRIPTNAME list --installed${RESET} or ${CYAN}li${RESET}"
    echo -e "   ${BOLDWHITE}...from AUR:${RESET}    ${CYAN}$SCRIPTNAME list --installed-aur${RESET} or ${CYAN}la${RESET}"
    echo -e "    ${BOLDWHITE}...by repo:${RESET}    ${CYAN}$SCRIPTNAME list --installed-repo [REPO]${RESET} or ${CYAN}lr${RESET}"
    echo -e "${BOLDWHITE}List outdated:${RESET}     ${CYAN}$SCRIPTNAME list --upgradable${RESET} or ${CYAN}lu${RESET}"
    echo -e "${BOLDWHITE}Remove unused:${RESET}     ${CYAN}$SCRIPTNAME autoremove${RESET}"
    echo -e "${BOLDWHITE}Clean cache:${RESET}       ${CYAN}$SCRIPTNAME clean${RESET}"
    echo    " → Cleaning the cache might make it impossible/more difficult"
    echo    "   to downgrade packages."
    echo -e "${BOLDWHITE}Which package:${RESET}     ${CYAN}$SCRIPTNAME provides PROGRAM${RESET}"
    echo -e "${BOLDWHITE}Show dependencies:${RESET} ${CYAN}$SCRIPTNAME deptree [--reverse] PACKAGE${RESET}"
    echo -e "${BOLDWHITE}Show help:${RESET}         ${CYAN}$SCRIPTNAME [help]${RESET}"
    echo ""
    echo -e "${BOLDWHITE}Dependencies${RESET}"
    echo "------------"
    echo -e "- ${BOLDBLUE}aur${RESET}/${BOLDWHITE}yay${RESET} or ${BOLDYELLOW}endeavouros${RESET}/${BOLDWHITE}yay${RESET}"
    echo -e "- ${BOLDGREEN}extra${RESET}/${BOLDWHITE}pacman-contrib${RESET} (paccache, pactree, paclist, checkupdates)"
    echo -e "- ${BOLDGREEN}extra${RESET}/${BOLDWHITE}reflector${RESET}"
    echo -e "- ${BOLDBLUE}aur${RESET}/${BOLDWHITE}downgrade${RESET}"
    echo ""
    echo -e "If you're using ${BOLDPURPLE}EndeavourOS${RESET}, these packages should already be"
    echo -e "installed for you."
    echo ""
    echo -e "${BOLDWHITE}Shortcuts${RESET}"
    echo "---------"
    echo -e "${BOLDCYAN}(i)${RESET}nstall, ${BOLDCYAN}(r)${RESET}emove, ${BOLDCYAN}(p)${RESET}urge, ${BOLDCYAN}(d)${RESET}owngrade, ${BOLDCYAN}(s)${RESET}earch, ${BOLDCYAN}(S)${RESET}how,"
    echo -e "${BOLDCYAN}(U)${RESET}pdate, ${BOLDCYAN}(u)${RESET}pgrade, update-${BOLDCYAN}(m)${RESET}irrors, ${BOLDCYAN}(l)${RESET}ist, ${BOLDCYAN}(c)${RESET}lean, autoremove/auto${BOLDCYAN}(C)${RESET}lean"
}

function main {
    sanity-checks "$@"

    if [ -n "$1" ]; then
        case "$1" in
            install|i|in)
                [ -z "$2" ] && show-message "no-more-args" "package" "install" && exit
                yay -S "${@:2}" --needed
            ;;
            remove|uninstall|r|rm)
                [ -z "$2" ] && show-message "no-more-args" "package" "remove" && exit
                yay -Rs "${@:2}"
            ;;
            purge|p)
                [ -z "$2" ] && show-message "no-more-args" "package" "purge" && exit
                yay -Rns "${@:2}"
            ;;
            downgrade|d)
                ! [ -x "$(command -v downgrade)" ] && show-message "downgrade-missing" && exit
                [ -z "$2" ] && show-message "no-more-args" "package" "downgrade" && exit
                downgrade "${@:2}"
            ;;
            search|s|se)
                [ -z "$2" ] && show-message "no-second-arg" "pattern" "search" && exit
                yay -Ss "${@:2}"
                # pacsearch "${@:2}"
                # yay -Qs "${@:2}"
            ;;
            show|info|S)
                [ -z "$2" ] && show-message "no-second-arg" "package" "show" && exit
                yay -Si "${@:2}"
            ;;
            update|U|refresh|ref)
                if [ -n "$2" ]; then
                    if [ "$2" = "--force" ] || [ "$2" = "-f" ]; then
                        yay -Syy
                    else
                        show-message "unknown-arg" "$2" "update [--force|-f]"
                    fi
                else
                    yay -Sy
                fi
            ;;
            upgrade|u|up)
                if [ -n "$2" ]; then
                    echo -e "${BOLDYELLOW}Warning: Making a partial upgrade might break your system!${RESET}"
                    echo -e "${BOLDYELLOW}It is recommended to use ${CYAN}$SCRIPTNAME install PACKAGE(S)${BOLDYELLOW} instead.${RESET}"
                    if confirm "Do you want to continue anyways?"; then
                        yay -Sy "${@:2}"
                    else
                        echo "Abort."
                    fi
                else
                    yay
                    # yay -Syu  # Update all, "yay" does the same
                    # yay -Sua  # Update AUR only
                    # yay -Syyu # Update all and refresh database (use after updating mirrorlist)
                fi
            ;;
            update-mirrors|m)
                ! [ -x "$(command -v reflector)" ] && show-message "reflector-missing" && exit

                echo "Updating mirrors in /etc/pacman.d/mirrorlist"
                reflector --protocol https --verbose --latest 25 --sort rate --save /etc/pacman.d/mirrorlist
                if [ -x "$(command -v eos-rankmirrors)" ]; then
                    echo "Updating EndeavourOS mirrors in /etc/pacman.d/endeavouros-mirrorlist"
                    eos-rankmirrors --verbose
                fi
                echo "Updating database"
                yay -Syy
            ;;
            list|l)
                if [ -n "$2" ]; then
                    case "$2" in
                        --upgradable|--outdated|-u)
                            list-upgradable "${@:3}"
                        ;;
                        --installed|-i)
                            list-installed
                        ;;
                        --installed-aur|-a)
                            list-installed-from-aur
                        ;;
                        --installed-repo|-r)
                            list-installed-from-repo "${@:3}"
                        ;;
                        *)
                            show-message "unknown-arg" "$2" "list [--upgradable|--installed|--installed-aur|--installed-repo]"
                        ;;
                    esac
                else
                    yay -Ss ".*" # Use search and match anything.
                fi
            ;;
            list-updates|list-upgrades|list-upgradable|list-outdated|checkupdates|outdated|lu)
                list-upgradable "${@:2}"
            ;;
            li) list-installed ;;
            la) list-installed-from-aur ;;
            lr) list-installed-from-repo "${@:2}" ;;
            deptree|deplist|dependencies|dep)
                ! [ -x "$(command -v pactree)" ] && show-message "pacman-contrib-missing" "pactree" && exit
                [ -z "$2" ] && show-message "no-second-arg" "package" "deptree" && exit
                pactree "${@:2}"
            ;;
            provides|what-provides)
                [ -z "$2" ] && show-message "no-second-arg" "program" "provides" && exit
                pacman -Qo "${@:2}"
            ;;
            autoremove|autoclean|C)
                yay -Yc # Remove unneeded dependencies
                if pacman -Qdtq > /dev/null; then
                    # https://wiki.archlinux.org/title/Pacman/Tips_and_tricks#Removing_unused_packages_(orphans)
                    # https://www.shellcheck.net/wiki/SC2046
                    read -ra orphans < <(pacman -Qdtq)
                    sudo pacman -Rns "${orphans[@]}" # Remove orphans
                    # yay -Rss $(yay -Qdtq)
                else
                    echo "pacman hasn't found any orphans."
                fi
            ;;
            clean|c|cc)
                ! [ -x "$(command -v paccache)" ] && show-message "pacman-contrib-missing" "paccache" && exit
                # sudo pacman -Scc # Clean cache
                paccache -r # Clean-up old pacman pkg in "/var/cache/pacman/pkg", but keep last 3
            ;;
            help)
                show-help
            ;;
            *)
                echo "Unknown command: $1"
            ;;
        esac
    else
        show-help
    fi
}

main "$@"