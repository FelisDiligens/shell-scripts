#!/bin/bash

# apt-yay
# -------
# Simple yay wrapper inspired by apt, dnf, and similar package managers.
#
# To "install" this script:
# sudo mkdir -p /usr/local/bin
# sudo cp apt-yay /usr/local/bin
# sudo chmod +x /usr/local/bin/apt-yay
# (you can also rename this script to any name you like)

# Sources:
# https://wiki.archlinux.org/title/pacman
# https://github.com/Jguer/yay
# https://gitlab.archlinux.org/pacman/pacman-contrib
# https://github.com/archlinux-downgrade/downgrade

# Colors
# https://stackoverflow.com/a/5947802
RED='\033[1;31m'    # Used for errors
YELLOW='\033[1;33m' # Used for warnings
CYAN='\033[0;36m'   # Used to highlight commands
GREEN='\033[1;32m'  # Bold green
BLUE='\033[1;34m'  # Bold blue
WHITE='\033[1;37m'  # Bold white
PURPLE='\033[1;35m' # Bold purple
BLACK='\033[0;30m'
RESET='\033[0m'     # Resets text color

# Name of the script file, e.g. "apt-yay"
SCRIPTNAME=$(basename "$0")

# Check if pacman command exists
if ! [ -x "$(command -v pacman)" ] && [ "$1" != "help" ]; then
    echo -e "${RED}Error: pacman is not installed.${RESET}"
    echo "Are you using Arch Linux?"
    exit 1
fi

# Check if yay command exists
if ! [ -x "$(command -v yay)" ] && [ "$1" != "help" ]; then
    echo -e "${RED}Error: yay is not installed.${RESET}"
    # Might need to run `pacman -Sy` (or `apt-yay update`) before:
    echo -e "Run (Arch)    $ ${CYAN}sudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si${RESET}"
    echo -e "Run (Manjaro) $ ${CYAN}sudo pacman -S --needed git base-devel yay${RESET}"
    exit 1
fi

# Show warning if we run as root
if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}Avoid running apt-yay as root/sudo.${RESET}"
    echo "It will ask for your password if necessary."
fi


# INSTALL
if [ -n "$1" ] && [ "$1" = "install" ]; then
    if [ -n "$2" ]; then
        yay -S "${@:2}" --needed
    else
        echo "No package given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME install PACKAGE(S)${RESET}"
    fi
# REMOVE
elif [ -n "$1" ] && { [ "$1" = "remove" ] || [ "$1" = "uninstall" ]; }; then
    if [ -n "$2" ]; then
        yay -Rs "${@:2}"
    else
        echo "No package given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME remove PACKAGE(S)${RESET}"
    fi
# PURGE
elif [ -n "$1" ] && [ "$1" = "purge" ]; then
    if [ -n "$2" ]; then
        yay -Rns "${@:2}"
    else
        echo "No package given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME remove PACKAGE(S)${RESET}"
    fi
# DOWNGRADE
elif [ -n "$1" ] && [ "$1" = "downgrade" ]; then
    if [ -n "$2" ]; then
        if [ -x "$(command -v downgrade)" ]; then
            downgrade "${@:2}"
        else
            echo -e "${YELLOW}Please install downgrade from the AUR${RESET}. See: https://aur.archlinux.org/packages/downgrade"
            echo -e "Run $ ${CYAN}yay -S downgrade${RESET} or $ ${CYAN}$SCRIPTNAME install downgrade${RESET}"
        fi
    else
        echo "No package given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME downgrade PACKAGE(S)${RESET}"
    fi
# SEARCH
elif [ -n "$1" ] && [ "$1" = "search" ]; then
    if [ -n "$2" ]; then
        yay -Ss "${@:2}"
        # pacsearch "${@:2}"
        # yay -Qs "${@:2}"
        # yay -Ss "${@:2}"
    else
        echo "No pattern given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME search PATTERN${RESET}"
    fi
# SHOW
elif [ -n "$1" ] && { [ "$1" = "show" ] || [ "$1" = "info" ]; }; then
    if [ -n "$2" ]; then
        yay -Si "${@:2}"
    else
        echo "No package given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME show PACKAGE${RESET}"
    fi
# UPDATE
elif [ -n "$1" ] && [ "$1" = "update" ]; then
    if [ -n "$2" ]; then
        if [ "$2" = "--force" ] || [ "$2" = "-f" ]; then
            yay -Syy
        else
            echo "Unknown argument: $2"
            echo -e "Usage: ${CYAN}$SCRIPTNAME update [--force|-f]${RESET}"
        fi
    else
        yay -Sy
    fi
# UPGRADE
elif [ -n "$1" ] && [ "$1" = "upgrade" ]; then
    if [ -n "$2" ]; then
        echo -e "${YELLOW}Warning: Making a partial upgrade might break your system!${RESET}"
        echo -e "${YELLOW}It is recommended to use ${CYAN}$SCRIPTNAME install PACKAGE(S)${YELLOW} instead.${RESET}"
        read -p "Do you want to continue anyways? [y|N] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            yay -Sy "${@:2}"
        else
            echo "Abort."
        fi
    else
        yay
        # yay -Syu  # Update all, "yay" does the same
        # yay -Sua  # Update AUR only
        # yay -Syyu # Update all and refresh database (use after updating mirrorlist)
    fi
# UPDATE MIRRORS
elif [ -n "$1" ] && [ "$1" = "update-mirrors" ]; then
    if [ -x "$(command -v reflector)" ]; then
        echo "Updating mirrors in /etc/pacman.d/mirrorlist"
        reflector --protocol https --verbose --latest 25 --sort rate --save /etc/pacman.d/mirrorlist
        if [ -x "$(command -v eos-rankmirrors)" ]; then
            echo "Updating EndeavourOS mirrors in /etc/pacman.d/endeavouros-mirrorlist"
            eos-rankmirrors --verbose
        fi
        echo "Updating database"
        yay -Syy
    else
        echo -e "${YELLOW}Please install reflector${RESET}"
        echo -e "Run $ ${CYAN}yay -S reflector${RESET} or $ ${CYAN}$SCRIPTNAME install reflector${RESET}"
    fi
# LIST
elif [ -n "$1" ] && [ "$1" = "list" ]; then
    if [ -n "$2" ]; then
        if [ "$2" = "--upgradable" ] || [ "$2" = "--outdated" ]; then
            if [ -x "$(command -v checkupdates)" ]; then
                checkupdates "${@:3}"
            else
                echo -e "${YELLOW}Please install pacman-contrib to use checkupdates${RESET}"
                echo -e "Run $ ${CYAN}yay -S pacman-contrib${RESET} or $ ${CYAN}$SCRIPTNAME install pacman-contrib${RESET}"
            fi
        elif [ "$2" = "--installed" ]; then
            # paclist REPO
            yay -Qe # -e, --explicit
        else
            echo "Unknown argument: $2"
            echo -e "Usage: ${CYAN}$SCRIPTNAME list [--upgradable|--installed]${RESET}"
        fi
    else
        yay -Ss ".*" # Use search and match anything.
    fi
# DEPTREE
elif [ -n "$1" ] && { [ "$1" = "deplist" ] || [ "$1" = "deptree" ]; }; then
    if [ -x "$(command -v pactree)" ]; then
        pactree "${@:2}"
    else
        echo -e "${YELLOW}Please install pacman-contrib to use pactree${RESET}"
        echo -e "Run $ ${CYAN}yay -S pacman-contrib${RESET} or $ ${CYAN}$SCRIPTNAME install pacman-contrib${RESET}"
    fi
# PROVIDES
elif [ -n "$1" ] && [ "$1" = "provides" ]; then
    if [ -n "$2" ]; then
        pacman -Qo "${@:2}"
    else
        echo "No package given."
        echo -e "Usage: ${CYAN}$SCRIPTNAME provides PROGRAM${RESET}"
    fi
# AUTOREMOVE
elif [ -n "$1" ] && [ "$1" = "autoremove" ]; then
    yay -Yc # Remove unneeded dependencies
    if pacman -Qdtq > /dev/null; then
        # https://wiki.archlinux.org/title/Pacman/Tips_and_tricks#Removing_unused_packages_(orphans)
        # https://www.shellcheck.net/wiki/SC2046
        read -ra orphans < <(pacman -Qdtq)
        sudo pacman -Rns "${orphans[@]}" # Remove orphans
        # yay -Rss $(yay -Qdtq)
    else
        echo "pacman hasn't found any orphans. Yay!"
    fi
# CLEAN
elif [ -n "$1" ] && [ "$1" = "clean" ]; then
    # sudo pacman -Scc # Clean cache
    if [ -x "$(command -v paccache)" ]; then
        paccache -r # Clean-up old pacman pkg in "/var/cache/pacman/pkg", but keep last 3
    fi
# HELP
elif [ -z "$1" ] || [ "$1" = "help" ]; then
    echo -e "${WHITE}$SCRIPTNAME — Simple yay wrapper inspired by apt${RESET}"
    echo "--------------------------------------------"
    echo -e "${WHITE}Install:${RESET}           ${CYAN}$SCRIPTNAME install PACKAGE(S)${RESET}"
    echo -e "${WHITE}Remove:${RESET}            ${CYAN}$SCRIPTNAME remove PACKAGE(S)${RESET}"
    echo -e "${WHITE}Purge:${RESET}             ${CYAN}$SCRIPTNAME purge PACKAGE(S)${RESET}"
    echo -e " → ${CYAN}purge${RESET} additionally removes configuration files."
    echo -e "   Both ${CYAN}remove${RESET} and ${CYAN}purge${RESET} also remove unused dependencies."
    echo -e "${WHITE}Downgrade:${RESET}         ${CYAN}$SCRIPTNAME downgrade PACKAGE(S)${RESET}"
    echo -e "${WHITE}Search:${RESET}            ${CYAN}$SCRIPTNAME search PATTERN${RESET}"
    echo -e "${WHITE}Show info:${RESET}         ${CYAN}$SCRIPTNAME show PACKAGE${RESET}"
    echo -e "${WHITE}Update db:${RESET}         ${CYAN}$SCRIPTNAME update [--force|-f]${RESET}"
    echo -e " → use the ${CYAN}--force${RESET} switch after changing the mirrorlist"
    echo    "   outside of $SCRIPTNAME."
    echo -e "${WHITE}Upgrade:${RESET}           ${CYAN}$SCRIPTNAME upgrade [PACKAGE(S)]${RESET}"
    echo -e "${WHITE}Update mirrors:${RESET}    ${CYAN}$SCRIPTNAME update-mirrors${RESET}"
    echo -e "${WHITE}List all:${RESET}          ${CYAN}$SCRIPTNAME list${RESET}"
    echo -e "${WHITE}List installed:${RESET}    ${CYAN}$SCRIPTNAME list --installed${RESET}"
    echo -e "${WHITE}List outdated:${RESET}     ${CYAN}$SCRIPTNAME list --upgradable${RESET}"
    echo -e "${WHITE}Remove unused:${RESET}     ${CYAN}$SCRIPTNAME autoremove${RESET}"
    echo -e "${WHITE}Clean cache:${RESET}       ${CYAN}$SCRIPTNAME clean${RESET}"
    echo    " → Cleaning the cache might make it impossible/more difficult"
    echo    "   to downgrade packages."
    echo -e "${WHITE}Which package:${RESET}     ${CYAN}$SCRIPTNAME provides PROGRAM${RESET}"
    echo -e "${WHITE}Show dependencies:${RESET} ${CYAN}$SCRIPTNAME deptree [--reverse] PACKAGE${RESET}"
    echo -e "${WHITE}Show help:${RESET}         ${CYAN}$SCRIPTNAME [help]${RESET}"
    echo ""
    echo -e "${WHITE}Dependencies${RESET}"
    echo "------------"
    echo -e "- ${BLUE}aur${RESET}/${WHITE}yay${RESET} or ${YELLOW}endeavouros${RESET}/${WHITE}yay${RESET}"
    echo -e "- ${GREEN}extra${RESET}/${WHITE}pacman-contrib${RESET} (paccache, pactree, checkupdates)"
    echo -e "- ${GREEN}extra${RESET}/${WHITE}reflector${RESET}"
    echo -e "- ${BLUE}aur${RESET}/${WHITE}downgrade${RESET}"
    echo ""
    echo -e "If you're using ${PURPLE}EndeavourOS${RESET}, these packages should already be"
    echo -e "installed for you."
# UNKNOWN
else
    echo "Unknown command: $1"
    echo ""
fi