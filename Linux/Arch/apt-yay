#!/bin/bash

# apt-yay
# -------
# Simple yay wrapper inspired by apt, dnf, zypper, and similar package managers.
#
# To "install" this script:
# sudo mkdir -p /usr/local/bin
# sudo cp apt-yay /usr/local/bin
# sudo chmod +x /usr/local/bin/apt-yay
# (you can also rename this script to any name you like)

# Sources:
# https://wiki.archlinux.org/title/pacman
# https://github.com/Jguer/yay
# https://gitlab.archlinux.org/pacman/pacman-contrib
# https://github.com/archlinux-downgrade/downgrade

# Colors
# https://stackoverflow.com/a/5947802
BOLDRED='\033[1;31m'    # Used for errors
BOLDYELLOW='\033[1;33m' # Used for warnings
CYAN='\033[0;36m'       # Used to highlight commands
BOLDCYAN='\033[1;36m'
BOLDGREEN='\033[1;32m'
BOLDBLUE='\033[1;34m'
BOLDWHITE='\033[1;37m'
BOLDPURPLE='\033[1;35m'
RESET='\033[0m'         # Resets text color

# Name of the script file, e.g. "apt-yay"
SCRIPTNAME=$(basename "$0")

function show-message {
    case $1 in
        no-more-args)
            echo "No $2 given."
            echo -e "Usage: ${CYAN}$SCRIPTNAME $3 ${2^^}(S)${RESET}"
        ;;
        no-second-arg)
            echo "No $2 given."
            echo -e "Usage: ${CYAN}$SCRIPTNAME $3 ${2^^}${RESET}"
        ;;
        unknown-arg)
            echo "Unknown argument: $2"
            echo -e "Usage: ${CYAN}$SCRIPTNAME $3${RESET}"
        ;;
        downgrade-missing)
            echo -e "${BOLDYELLOW}Please install downgrade from the AUR${RESET}. See: https://aur.archlinux.org/packages/downgrade"
            echo -e "Run $ ${CYAN}yay -S downgrade${RESET} or $ ${CYAN}$SCRIPTNAME install downgrade${RESET}"
        ;;
        reflector-missing)
            echo -e "${BOLDYELLOW}Please install reflector${RESET}"
            echo -e "Run $ ${CYAN}yay -S reflector${RESET} or $ ${CYAN}$SCRIPTNAME install reflector${RESET}"
        ;;
        pacman-contrib-missing)
            echo -e "${BOLDYELLOW}Please install pacman-contrib to use $2${RESET}"
            echo -e "Run $ ${CYAN}yay -S pacman-contrib${RESET} or $ ${CYAN}$SCRIPTNAME install pacman-contrib${RESET}"
        ;;
        yay-missing)
            echo -e "${BOLDRED}Error: yay is not installed.${RESET}"
            # Might need to run `pacman -Sy` (or `apt-yay update`) before:
            echo -e "Run (Arch)    $ ${CYAN}sudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si${RESET}"
            echo -e "Run (Manjaro) $ ${CYAN}sudo pacman -S --needed git base-devel yay${RESET}"
        ;;
        pacman-missing)
            echo -e "${BOLDRED}Error: pacman is not installed.${RESET}"
            echo "Are you using Arch Linux?"
        ;;
        root-warning)
            echo -e "${BOLDYELLOW}Avoid running apt-yay as root/sudo.${RESET}"
            echo "It will ask for your password if necessary."
        ;;
    esac
}

function confirm {
    read -p "$1 [y|N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Check if pacman command exists
if ! [ -x "$(command -v pacman)" ] && [ "$1" != "help" ]; then
    show-message "pacman-missing"
    exit 1
fi

# Check if yay command exists
if ! [ -x "$(command -v yay)" ] && [ "$1" != "help" ]; then
    show-message "yay-missing"
    exit 1
fi

# Show warning if we run as root
if [ "$EUID" -eq 0 ]; then
    show-message "root-warning"
    ! confirm "Do you want to continue?" && exit 1
fi

# INSTALL
if [ -n "$1" ] && { [ "$1" = "install" ] || [ "$1" = "i" ] || [ "$1" = "in" ]; }; then
    if [ -n "$2" ]; then
        yay -S "${@:2}" --needed
    else
        show-message "no-more-args" "package" "install"
    fi
# REMOVE
elif [ -n "$1" ] && { [ "$1" = "remove" ] || [ "$1" = "uninstall" ] || [ "$1" = "r" ] || [ "$1" = "rm" ]; }; then
    if [ -n "$2" ]; then
        yay -Rs "${@:2}"
    else
        show-message "no-more-args" "package" "remove"
    fi
# PURGE
elif [ -n "$1" ] && { [ "$1" = "purge" ] || [ "$1" = "p" ]; }; then
    if [ -n "$2" ]; then
        yay -Rns "${@:2}"
    else
        show-message "no-more-args" "package" "purge"
    fi
# DOWNGRADE
elif [ -n "$1" ] && { [ "$1" = "downgrade" ] || [ "$1" = "d" ]; }; then
    if [ -n "$2" ]; then
        if [ -x "$(command -v downgrade)" ]; then
            downgrade "${@:2}"
        else
            show-message "downgrade-missing"
        fi
    else
        show-message "no-more-args" "package" "downgrade"
    fi
# SEARCH
elif [ -n "$1" ] && { [ "$1" = "search" ] || [ "$1" = "s" ] || [ "$1" = "se" ]; };  then
    if [ -n "$2" ]; then
        yay -Ss "${@:2}"
        # pacsearch "${@:2}"
        # yay -Qs "${@:2}"
        # yay -Ss "${@:2}"
    else
        show-message "no-second-arg" "pattern" "search"
    fi
# SHOW
elif [ -n "$1" ] && { [ "$1" = "show" ] || [ "$1" = "info" ] || [ "$1" = "S" ]; }; then
    if [ -n "$2" ]; then
        yay -Si "${@:2}"
    else
        show-message "no-second-arg" "package" "show"
    fi
# UPDATE
elif [ -n "$1" ] && { [ "$1" = "update" ] || [ "$1" = "U" ] || [ "$1" = "ref" ]; }; then
    if [ -n "$2" ]; then
        if [ "$2" = "--force" ] || [ "$2" = "-f" ]; then
            yay -Syy
        else
            show-message "unknown-arg" "$2" "update [--force|-f]"
        fi
    else
        yay -Sy
    fi
# UPGRADE
elif [ -n "$1" ] && { [ "$1" = "upgrade" ] || [ "$1" = "u" ] || [ "$1" = "up" ]; }; then
    if [ -n "$2" ]; then
        echo -e "${BOLDYELLOW}Warning: Making a partial upgrade might break your system!${RESET}"
        echo -e "${BOLDYELLOW}It is recommended to use ${CYAN}$SCRIPTNAME install PACKAGE(S)${BOLDYELLOW} instead.${RESET}"
        if confirm "Do you want to continue anyways?"; then
            yay -Sy "${@:2}"
        else
            echo "Abort."
        fi
    else
        yay
        # yay -Syu  # Update all, "yay" does the same
        # yay -Sua  # Update AUR only
        # yay -Syyu # Update all and refresh database (use after updating mirrorlist)
    fi
# UPDATE MIRRORS
elif [ -n "$1" ] && { [ "$1" = "update-mirrors" ] || [ "$1" = "m" ]; }; then
    if [ -x "$(command -v reflector)" ]; then
        echo "Updating mirrors in /etc/pacman.d/mirrorlist"
        reflector --protocol https --verbose --latest 25 --sort rate --save /etc/pacman.d/mirrorlist
        if [ -x "$(command -v eos-rankmirrors)" ]; then
            echo "Updating EndeavourOS mirrors in /etc/pacman.d/endeavouros-mirrorlist"
            eos-rankmirrors --verbose
        fi
        echo "Updating database"
        yay -Syy
    else
        show-message "reflector-missing"
    fi
# LIST
elif [ -n "$1" ] && { [ "$1" = "list" ] || [ "$1" = "l" ]; }; then
    if [ -n "$2" ]; then
        if [ "$2" = "--upgradable" ] || [ "$2" = "--outdated" ] || [ "$2" = "-u" ]; then
            if [ -x "$(command -v checkupdates)" ]; then
                checkupdates "${@:3}"
            else
                show-message "pacman-contrib-missing" "checkupdates"
            fi
        elif [ "$2" = "--installed" ] || [ "$2" = "-i" ]; then
            yay -Qe # -e, --explicit
        elif [ "$2" = "--installed-aur" ] || [ "$2" = "-a" ]; then
            yay -Qm | while read -r line; do
                # The following check assumes that any installed AUR package has a corresponding folder under ~/.cache/yay/
                package_name="$(echo "$line" | cut -d' ' -f1)"
                if [ -d "$HOME/.cache/yay/$package_name" ]; then
                    echo -e "${BOLDBLUE}aur${RESET}/${BOLDWHITE}$package_name${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
                else
                    echo -e "${BOLDYELLOW}local${RESET}/${BOLDWHITE}$package_name${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
                fi
            done
        elif [ "$2" = "--installed-repo" ] || [ "$2" = "-r" ]; then
            if [ -x "$(command -v paclist)" ]; then
                if [ -n "$3" ]; then
                    case "$3" in
                        *-testing|*-unstable|staging) REPO_COLOR=$BOLDRED ;;
                        core) REPO_COLOR=$BOLDYELLOW ;;
                        extra) REPO_COLOR=$BOLDGREEN ;;
                        multilib) REPO_COLOR=$BOLDCYAN ;;
                        *aur) REPO_COLOR=$BOLDBLUE ;;
                        endeavouros) REPO_COLOR=$BOLDYELLOW ;;
                    esac
                    paclist "${@:3}" | while read -r line; do
                        if [ -z "$REPO_COLOR" ]; then
                            echo -e "${BOLDWHITE}$(echo "$line" | cut -d' ' -f1)${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
                        else
                            echo -e "${REPO_COLOR}$3${RESET}/${BOLDWHITE}$(echo "$line" | cut -d' ' -f1)${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
                        fi
                    done
                else
                    for repo in "core" "core-testing" "extra" "extra-testing" "multilib" "multilib-testing" "gnome-unstable" "kde-unstable" "endeavouros" "aur" "chaotic-aur" "staging"; do
                        REPO_COLOR=$BOLDYELLOW
                        case "$repo" in
                            *-testing|*-unstable|staging) REPO_COLOR=$BOLDRED ;;
                            core) REPO_COLOR=$BOLDYELLOW ;;
                            extra) REPO_COLOR=$BOLDGREEN ;;
                            multilib) REPO_COLOR=$BOLDCYAN ;;
                            *aur) REPO_COLOR=$BOLDBLUE ;;
                        esac
                        paclist $repo 2>/dev/null | while read -r line; do
                            echo -e "${REPO_COLOR}$repo${RESET}/${BOLDWHITE}$(echo "$line" | cut -d' ' -f1)${RESET} ${BOLDGREEN}$(echo "$line" | cut -d' ' -f2)${RESET}"
                        done
                    done
                fi
            else
                show-message "pacman-contrib-missing" "paclist"
            fi
        else
            show-message "unknown-arg" "$2" "list [--upgradable|--installed|--installed-aur|--installed-repo]"
        fi
    else
        yay -Ss ".*" # Use search and match anything.
    fi
# DEPTREE
elif [ -n "$1" ] && { [ "$1" = "deplist" ] || [ "$1" = "deptree" ]; }; then
    if [ -x "$(command -v pactree)" ]; then
        pactree "${@:2}"
    else
        show-message "pacman-contrib-missing" "pactree"
    fi
# PROVIDES
elif [ -n "$1" ] && [ "$1" = "provides" ]; then
    if [ -n "$2" ]; then
        pacman -Qo "${@:2}"
    else
        show-message "no-second-arg" "program" "provides"
    fi
# AUTOREMOVE
elif [ -n "$1" ] && { [ "$1" = "autoremove" ] || [ "$1" = "C" ]; }; then
    yay -Yc # Remove unneeded dependencies
    if pacman -Qdtq > /dev/null; then
        # https://wiki.archlinux.org/title/Pacman/Tips_and_tricks#Removing_unused_packages_(orphans)
        # https://www.shellcheck.net/wiki/SC2046
        read -ra orphans < <(pacman -Qdtq)
        sudo pacman -Rns "${orphans[@]}" # Remove orphans
        # yay -Rss $(yay -Qdtq)
    else
        echo "pacman hasn't found any orphans. Yay!"
    fi
# CLEAN
elif [ -n "$1" ] && { [ "$1" = "clean" ] || [ "$1" = "c" ] || [ "$1" = "cc" ]; }; then
    # sudo pacman -Scc # Clean cache
    if [ -x "$(command -v paccache)" ]; then
        paccache -r # Clean-up old pacman pkg in "/var/cache/pacman/pkg", but keep last 3
    else
        show-message "pacman-contrib-missing" "paccache"
    fi
# HELP
elif [ -z "$1" ] || [ "$1" = "help" ]; then
    echo -e "${BOLDWHITE}$SCRIPTNAME — Simple yay wrapper inspired by apt${RESET}"
    echo "--------------------------------------------"
    echo -e "${BOLDWHITE}Install:${RESET}           ${CYAN}$SCRIPTNAME install PACKAGE(S)${RESET}"
    echo -e "${BOLDWHITE}Remove:${RESET}            ${CYAN}$SCRIPTNAME remove PACKAGE(S)${RESET}"
    echo -e "${BOLDWHITE}Purge:${RESET}             ${CYAN}$SCRIPTNAME purge PACKAGE(S)${RESET}"
    echo -e " → ${CYAN}purge${RESET} additionally removes configuration files."
    echo -e "   Both ${CYAN}remove${RESET} and ${CYAN}purge${RESET} also remove unused dependencies."
    echo -e "${BOLDWHITE}Downgrade:${RESET}         ${CYAN}$SCRIPTNAME downgrade PACKAGE(S)${RESET}"
    echo -e "${BOLDWHITE}Search:${RESET}            ${CYAN}$SCRIPTNAME search PATTERN${RESET}"
    echo -e "${BOLDWHITE}Show info:${RESET}         ${CYAN}$SCRIPTNAME show PACKAGE${RESET}"
    echo -e "${BOLDWHITE}Update db:${RESET}         ${CYAN}$SCRIPTNAME update [--force|-f]${RESET}"
    echo -e " → use the ${CYAN}--force${RESET} switch after changing the mirrorlist"
    echo    "   outside of $SCRIPTNAME."
    echo -e "${BOLDWHITE}Upgrade:${RESET}           ${CYAN}$SCRIPTNAME upgrade [PACKAGE(S)]${RESET}"
    echo -e "${BOLDWHITE}Update mirrors:${RESET}    ${CYAN}$SCRIPTNAME update-mirrors${RESET}"
    echo -e "${BOLDWHITE}List all:${RESET}          ${CYAN}$SCRIPTNAME list${RESET}"
    echo -e "${BOLDWHITE}List installed:${RESET}    ${CYAN}$SCRIPTNAME list --installed|-i${RESET}"
    echo -e "   ${BOLDWHITE}...from AUR:${RESET}    ${CYAN}$SCRIPTNAME list --installed-aur|-a${RESET}"
    echo -e "    ${BOLDWHITE}...by repo:${RESET}    ${CYAN}$SCRIPTNAME list --installed-repo|-r [REPO]${RESET}"
    echo -e "${BOLDWHITE}List outdated:${RESET}     ${CYAN}$SCRIPTNAME list --upgradable|-u${RESET}"
    echo -e "${BOLDWHITE}Remove unused:${RESET}     ${CYAN}$SCRIPTNAME autoremove${RESET}"
    echo -e "${BOLDWHITE}Clean cache:${RESET}       ${CYAN}$SCRIPTNAME clean${RESET}"
    echo    " → Cleaning the cache might make it impossible/more difficult"
    echo    "   to downgrade packages."
    echo -e "${BOLDWHITE}Which package:${RESET}     ${CYAN}$SCRIPTNAME provides PROGRAM${RESET}"
    echo -e "${BOLDWHITE}Show dependencies:${RESET} ${CYAN}$SCRIPTNAME deptree [--reverse] PACKAGE${RESET}"
    echo -e "${BOLDWHITE}Show help:${RESET}         ${CYAN}$SCRIPTNAME [help]${RESET}"
    echo ""
    echo -e "${BOLDWHITE}Dependencies${RESET}"
    echo "------------"
    echo -e "- ${BOLDBLUE}aur${RESET}/${BOLDWHITE}yay${RESET} or ${BOLDYELLOW}endeavouros${RESET}/${BOLDWHITE}yay${RESET}"
    echo -e "- ${BOLDGREEN}extra${RESET}/${BOLDWHITE}pacman-contrib${RESET} (paccache, pactree, paclist, checkupdates)"
    echo -e "- ${BOLDGREEN}extra${RESET}/${BOLDWHITE}reflector${RESET}"
    echo -e "- ${BOLDBLUE}aur${RESET}/${BOLDWHITE}downgrade${RESET}"
    echo ""
    echo -e "If you're using ${BOLDPURPLE}EndeavourOS${RESET}, these packages should already be"
    echo -e "installed for you."
    echo ""
    echo -e "${BOLDWHITE}Shortcuts${RESET}"
    echo "---------"
    echo -e "${BOLDCYAN}(i)${RESET}nstall, ${BOLDCYAN}(r)${RESET}emove, ${BOLDCYAN}(p)${RESET}urge, ${BOLDCYAN}(d)${RESET}owngrade, ${BOLDCYAN}(s)${RESET}earch, ${BOLDCYAN}(S)${RESET}how,"
    echo -e "${BOLDCYAN}(U)${RESET}pdate, ${BOLDCYAN}(u)${RESET}pgrade, update-${BOLDCYAN}(m)${RESET}irrors, ${BOLDCYAN}(l)${RESET}ist, ${BOLDCYAN}(c)${RESET}lean, autoremove/auto${BOLDCYAN}(C)${RESET}lean"
# UNKNOWN
else
    echo "Unknown command: $1"
fi